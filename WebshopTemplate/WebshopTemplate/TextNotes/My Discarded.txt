From Program.cs

static async Task EnsureRolesAndAdminUser(WebApplication app)
{
    using var scope = app.Services.CreateScope();
    var services = scope.ServiceProvider;
    var context = services.GetRequiredService<ApplicationDbContext>();
    var userManager = services.GetRequiredService<UserManager<IdentityUser>>();
    var roleManager = services.GetRequiredService<RoleManager<IdentityRole>>();
    var logger = services.GetRequiredService<ILogger<Program>>();
    await DbInitializer.Initialize(context, userManager, roleManager);

    //using var scope = app.Services.CreateScope();
    //var services = scope.ServiceProvider;
    //var context = services.GetRequiredService<ApplicationDbContext>();
    //var userManager = services.GetRequiredService<UserManager<IdentityUser>>();
    //var roleManager = services.GetRequiredService<RoleManager<IdentityRole>>();
    //var roleStore = new RoleStore<IdentityRole>(context);

    //string[] roleNames = ["Admin", "Manager", "SuperMember", "Member"];
    //IdentityResult roleResult;

    //foreach (var roleName in roleNames)
    //{
    //    var roleExist = await roleManager.RoleExistsAsync(roleName);
    //    if (!roleExist)
    //    {
    //        //create the roles and seed them to the database
    //        roleResult = await roleManager.CreateAsync(new IdentityRole(roleName));
    //    }
    //}

    //IdentityUser? resultUser = await userManager.FindByEmailAsync("admin@admin.com"); // Find the admin user

    //if (resultUser == null)
    //{
    //    var adminUser = new IdentityUser
    //    {
    //        UserName = "Admin",
    //        Email = "admin@admin.com",
    //        EmailConfirmed = true,
    //        //FirstName = "Admin",
    //        //LastName = "Admin",
    //        //Address = "Admin Street 1",
    //        //City = "Admin City",
    //        //PostalCode = "1234",
    //        //Country = "Denmark",
    //        //Phone = "12345678",
    //        //EmploymentDate = DateTime.UtcNow,
    //        //BasePay = 0
    //    };

    //    var createResult = await userManager.CreateAsync(adminUser, "Admin1234!");
    //    if (createResult.Succeeded)
    //    {
    //        await userManager.AddToRoleAsync(adminUser, "Admin");
    //        // await userManager.AddClaimAsync(adminUser, new Claim(ClaimTypes.Role, "Admin"));
    //        // await context.SaveChangesAsync(); // Save changes to the database
    //    }
    //}
}

//builder.Services.AddIdentity<IdentityUser, IdentityRole>(options => options.SignIn.RequireConfirmedAccount = true)
//    .AddEntityFrameworkStores<ApplicationDbContext>();

//builder.Services.AddIdentity<Staff, IdentityRole>(options => options.SignIn.RequireConfirmedAccount = true)
//    .AddEntityFrameworkStores<ApplicationDbContext>();

//builder.Services.AddIdentity<Customer, IdentityRole>(options => options.SignIn.RequireConfirmedAccount = true)
//    .AddEntityFrameworkStores<ApplicationDbContext>();


--------------------------------------------
From DbInitializer.cs

namespace WebshopTemplate.Seeddata
{
    public class DbInitializer
    {
        private ApplicationDbContext _context;
        private UserManager<IdentityUser> _userManager;

        public DbInitializer(ApplicationDbContext context, UserManager<IdentityUser> userManager)
        {
            _context = context;
            _userManager = userManager;
        }

        public async Task SeedDatabase()
        {

            ArgumentNullException.ThrowIfNull(_userManager);

            _context.Database.EnsureCreated();

            // Define IdentityUser password and roles
            string password = "1234";
            string managerRole = "Manager";
            string superMemberRole = "SuperMember";
            string memberRole = "Member";

            // Define companies
            var company1 = new Company { Name = "Dead'R'Us", Address = "Street 1", City = "City A", PostalCode = "12345", Country = "Denmark", Email = "contact@companya.com", Phone = "12345678", Website = "www.companya.com" };
            var company2 = new Company { Name = "FuneralHome", Address = "Street 2", City = "City B", PostalCode = "23456", Country = "Denmark", Email = "contact@companyb.com", Phone = "87654321", Website = "www.companyb.com" };

            //// Define customers

            IdentityUser customerUser1 = new IdentityUser { UserName = "JohnDead", Email = "john@mail.com" };
            var result1 = await _userManager.CreateAsync(customerUser1, password);
            if (result1.Succeeded)
            {
                await _userManager.AddToRoleAsync(customerUser1, superMemberRole);
            }
            Customer customer1 = new Customer { UserId = customerUser1.Id, User = customerUser1, FirstName = "John", LastName = "Doe", Address = "Address 1", City = "City 1", PostalCode = "11111", Country = "Denmark", Phone = "11111111", RepresentingCompany = company1 };

            IdentityUser customerUser2 = new IdentityUser { UserName = "JaneDead", Email = "jane@mail.com" };
            var result2 = await _userManager.CreateAsync(customerUser2, password);
            if (result2.Succeeded)
            {
                await _userManager.AddToRoleAsync(customerUser2, superMemberRole);
            }
            Customer customer2 = new Customer { UserId = customerUser2.Id, User = customerUser2, FirstName = "Jane", LastName = "Doe", Address = "Address 2", City = "City 2", PostalCode = "22222", Country = "Denmark", Phone = "22222222", RepresentingCompany = company1 };

            IdentityUser customerUser3 = new IdentityUser { UserName = "Epic", Email = "daddy@mail.com" };
            var result3 = await _userManager.CreateAsync(customerUser3, password);
            if (result3.Succeeded)
            {
                await _userManager.AddToRoleAsync(customerUser3, superMemberRole);
            }
            Customer customer3 = new Customer { UserId = customerUser3.Id, User = customerUser3, FirstName = "Epic", LastName = "CreepyGuy", Address = "Address 3", City = "City 3", PostalCode = "33333", Country = "Denmark", Phone = "33333333", RepresentingCompany = company2 };

            IdentityUser customerUser4 = new IdentityUser { UserName = "Epic", Email = "mommy@mail.com" };
            var result4 = await _userManager.CreateAsync(customerUser4, password);
            if (result4.Succeeded)
            {
                await _userManager.AddToRoleAsync(customerUser4, superMemberRole);
            }
            Customer customer4 = new Customer { UserId = customerUser4.Id, User = customerUser4, FirstName = "Epic", LastName = "CreepyGal", Address = "Address 4", City = "City 4", PostalCode = "44444", Country = "Denmark", Phone = "44444444", RepresentingCompany = company2 };

            IdentityUser customerUser5 = new IdentityUser { UserName = "Epic", Email = "sonny@mail.com" };
            var result5 = await _userManager.CreateAsync(customerUser5, password);
            if (result5.Succeeded)
            {
                await _userManager.AddToRoleAsync(customerUser5, superMemberRole);
            }
            Customer customer5 = new Customer { UserId = customerUser5.Id, User = customerUser5, FirstName = "Epic", LastName = "CreepyKid", Address = "Address 5", City = "City 5", PostalCode = "55555", Country = "Denmark", Phone = "55555555" };

            IdentityUser customerUser6 = new IdentityUser { UserName = "Epic", Email = "sunny@mail.com" };
            var result6 = await _userManager.CreateAsync(customerUser6, password);
            if (result6.Succeeded)
            {
                await _userManager.AddToRoleAsync(customerUser6, memberRole);
            }
            Customer customer6 = new Customer { UserId = customerUser6.Id, User = customerUser6, FirstName = "Flower", LastName = "Power", Address = "Address 3", City = "City 3", PostalCode = "33333", Country = "Denmark", Phone = "33333333" };

            Customer[] customerArray = { customer1, customer2, customer3, customer4, customer5, customer6 };

            await _context.Customers.AddRangeAsync(customerArray);

            // Define Staff
            IdentityUser staffUser1 = new IdentityUser { UserName = "StaffJane", Email = "staff1@staff.com" };
            var result7 = await _userManager.CreateAsync(staffUser1, password);
            if (result7.Succeeded)
            {
                await _userManager.AddToRoleAsync(staffUser1, managerRole);
            }
            Staff Staff1 = new Staff { UserId = staffUser1.Id, User = staffUser1, FirstName = "StaffJane", LastName = "One", Address = "Address 6", City = "City 6", PostalCode = "66666", Country = "Denmark", Phone = "66666666" };

            IdentityUser staffUser2 = new IdentityUser { UserName = "StaffJohn", Email = "staff2@staff.com" };
            var result8 = await _userManager.CreateAsync(staffUser2, password);
            if (result8.Succeeded)
            {
                await _userManager.AddToRoleAsync(staffUser2, managerRole);
            }
            Staff Staff2 = new Staff { UserId = staffUser2.Id, User = staffUser2, FirstName = "StaffJohn", LastName = "Two", Address = "Address 7", City = "City 7", PostalCode = "77777", Country = "Denmark", Phone = "77777777" };

            IdentityUser staffUser3 = new IdentityUser { UserName = "StaffMitch", Email = "staff3@staff.com" };
            var result9 = await _userManager.CreateAsync(staffUser3, password);
            if (result9.Succeeded)
            {
                await _userManager.AddToRoleAsync(staffUser3, managerRole);
            }
            Staff Staff3 = new Staff { UserId = staffUser3.Id, User = staffUser3, FirstName = "StaffMitch", LastName = "Three", Address = "Address 8", City = "City 8", PostalCode = "88888", Country = "Denmark", Phone = "88888888" };

            Staff[] staffArray = { Staff1, Staff2, Staff3 };

            await _context.StaffMembers.AddRangeAsync(staffArray);

            //Add companies and customers to the database
            _context.Companies.Add(company1);
            _context.Companies.Add(company2);

            // Add company representatives to the companies
            company1.Representatives.Add(customer1);
            company1.Representatives.Add(customer2);
            company2.Representatives.Add(customer3);
            company2.Representatives.Add(customer4);

        }
    }
}

--------------------------------------------

From Program.cs

//string managerRole = "Manager";
//string managerEmail = "manager@manager.com";
//string managerPassword = "1234";

//var manager = await userManager.FindByEmailAsync(managerEmail.Normalize());

//if (await userManager.FindByEmailAsync(managerEmail) == null)
//{
//    manager = new IdentityUser();
//    manager.UserName = managerEmail;
//    manager.Email = managerEmail;
//    manager.EmailConfirmed = true;
//    await userManager.CreateAsync(manager, managerPassword);
//    await userManager.AddToRoleAsync(manager, managerRole);
//    Staff staffMember = new Staff
//    {
//        User = manager,
//        UserId = manager.Id,
//        FirstName = "Manager",
//        LastName = "One",
//        Address = "Address 6",
//        City = "City 6",
//        PostalCode = "66666",
//        Country = "Denmark",
//        Phone = "66666666",
//        EmploymentDate = DateTime.Now,
//        BasePay = 0,
//        Notes = "Manager",
//        ImageUrl = "manager.jpg"
//    };
//    context.StaffMembers.Add(staffMember);
//    await context.SaveChangesAsync();
//}

 --------------------------------------------

From ApplicationDbContext.cs

// Sample code to populate 8 Orders with OrderDetails
for (int i = 1; i <= 8; i++)
{
var newOrder = new Order
{
    Customer = customers[i % customers.Count], // Cycle through customers for example
    Staff = staffMembers[0], // Assuming one staff for simplicity
    OrderDate = DateTime.Now.AddDays(-i), // Different dates for demonstration
    Status = OrderStatus.Submitted, // Default status for all orders
    CommentFromUser = $"Special instructions for order {i}",
    OrderDetails = new List<OrderDetail>()
};

// Randomly select 4-6 products to create OrderDetails for each Order
var selectedProducts = products.OrderBy(p => Guid.NewGuid()).Take(new Random().Next(4, 7));
foreach (var product in selectedProducts)
{
    newOrder.OrderDetails.Add(new OrderDetail
    {
        Order = newOrder,
        ProductInOrder = product,
        Quantity = new Random().Next(1, 5), // Random quantity for demonstration
        Price = product.Price
    });
}

orders.Add(newOrder);
}

------------------------------------------
From BasketService.cs

namespace WebshopTemplate.Services
{
    public class BasketService : IBasketService
    {
        private readonly IProductService IProductService;
        private readonly HttpContext httpContext;
        public string BasketId { get; set; }
        public string ProductId { get; set; }
        public int Quantity { get; set; }
        public string UserId { get; set; } = "Session Guest";
        public string SessionBasketId { get; set; } = "Session Guest";

        public BasketService(IProductService iproductservice, string basketId, string productId, int quantity, HttpContext httpContext)
        {
            IProductService = iproductservice;
            BasketId = basketId;
            ProductId = productId;
            Quantity = quantity;
            this.httpContext = httpContext;
        }

        public Task<Basket> GetBasketAsync(string basketId)
        {
            var basket = httpContext.Session.GetBasket(basketId);
            if (basket == null)
            {
                basket = new Basket { Id = basketId, CustomerId = UserId };
                httpContext.Session.SetBasket(basketId, basket);
            }
            return Task.FromResult(basket);
        }

        public async Task AddBasketItemAsync(string basketId, string productId, int quantity)
        {
            var basket = await GetBasketAsync(basketId);
            var product = await IProductService.GetProductByIdAsync(productId);

            if (basket != null && product != null)
            {
                //var basketItem = new BasketItem { BasketId = basketId, ProductId = productId, Quantity = quantity, ProductInBasket = product };
                //basket.Items.Add(basketItem);

                var basketItem = basket.Items.FirstOrDefault(item => item.ProductId == productId);
                if (basketItem != null)
                {
                    basketItem.Quantity += quantity;
                }
                else
                {
                    basket.Items.Add(new BasketItem { BasketId =     basketId, ProductId = productId, Quantity = quantity, ProductInBasket = product });
                }
                httpContext.Session.SetBasket(basketId, basket);
                //await httpContext.Session.CommitAsync();
            }
            else
            {
                throw new Exception("Basket or product not found");
            }
        }

        public async Task RemoveBasketItemAsync(string basketId, string productId)
        {
            var basket = await GetBasketAsync(basketId);
            var basketItem = basket.Items.FirstOrDefault(item => item.ProductId == productId);

            if (basketItem != null)
            {
                basketItem.Quantity--;

                if (basketItem.Quantity <= 0)
                {
                    basket.Items.Remove(basketItem);
                }

                httpContext.Session.SetBasket(basketId, basket);
            }
        }

        public void TransferSessionBasketToUser(string userId, string sessionBasketId)
        {
            // Get the session basket
            var sessionBasket = httpContext.Session.GetBasket(sessionBasketId);

            if (sessionBasket != null)
            {
                // Set the basket for the user
                httpContext.Session.SetBasket(userId, sessionBasket);

                // Remove the session basket
                httpContext.Session.Remove(sessionBasketId);
            }
        }
        public void TransferUserBasketToSession(string userId, string sessionBasketId)
        {
            // Get the user basket
            var userBasket = httpContext.Session.GetBasket(userId);

            if (userBasket != null)
            {
                // Set the basket for the session
                httpContext.Session.SetBasket(sessionBasketId, userBasket);

                // Remove the user basket
                httpContext.Session.Remove(userId);
            }
        }
    }
}

------------------------------------------

        //builder.Services.AddSession(options =>
        //{
        //    options.IdleTimeout = TimeSpan.FromMinutes(30);
        //    options.Cookie.HttpOnly = true;
        //    options.Cookie.IsEssential = true;
        //    options.Cookie.Name = ".WebshopTemplate.Session";
        //    // options.Cookie.SecurePolicy = CookieSecurePolicy.Always;
        //    options.IOTimeout = TimeSpan.FromMinutes(30);
        //    options.Cookie.SameSite = SameSiteMode.None; //.Strict; should be strict, but strict is not supported by all browsers and we are in a development environment

        //});


        //builder.Services.ConfigureApplicationCookie(options =>
        //{
        //    // Cookie settings
        //    options.Cookie.HttpOnly = true;
        //    options.ExpireTimeSpan = TimeSpan.FromMinutes(60);
        //    // If the LoginPath isn't set, ASP.NET Core defaults the path to /Account/Login.
        //    options.LoginPath = "/Identity/Account/Login";
        //    options.AccessDeniedPath = "/Identity/Account/AccessDenied";
        //    options.SlidingExpiration = true;
        //});

------------------------------------------

        //using (var scope = app.Services.CreateScope())
        //{
        //    var context =
        //        scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
        //    var roleManager =
        //        scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
        //    context.Database.EnsureDeleted();
        //    context.Database.EnsureCreated();

        //    var roles = new[] { "Admin", "Manager", "SuperMember", "Member" };

        //    foreach (var role in roles)
        //    {
        //        var roleExist = await roleManager.RoleExistsAsync(role);
        //        if (!roleExist)
        //        {
        //            //create the roles and seed them to the database
        //            await roleManager.CreateAsync(new IdentityRole(role));
        //        }
        //    }
        //}

------------------------------------------